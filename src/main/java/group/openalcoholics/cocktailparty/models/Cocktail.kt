/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package group.openalcoholics.cocktailparty.models

import com.fasterxml.jackson.annotation.JsonIgnore
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonParser
import com.fasterxml.jackson.databind.DeserializationContext
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.deser.std.StdDeserializer
import group.openalcoholics.cocktailparty.db.dao.CocktailCategoryDao
import group.openalcoholics.cocktailparty.db.dao.GlassDao
import org.jdbi.v3.core.mapper.Nested
import org.jdbi.v3.core.mapper.reflect.ColumnName
import java.time.Instant

/**
 * Information about a cocktail and its recipe.
 * @param id The cocktail ID
 * @param name The name of the cocktail
 * @param description A description of the cocktail
 * @param ingredients A list of ingredients. Items may be a single ingredient or a list of ingredients which can be poured simulatenously.
 * @param category
 * @param glass
 * @param imageLink A link to an image of the cocktail
 * @param revisionDate The time of the latest update to the recipe
 * @param notes Arbitrary notes on the cocktail
 */
data class Cocktail(
        /* The cocktail ID */
        val id: kotlin.Int,
        /* The name of the cocktail */
        val name: kotlin.String,
        /* A description of the cocktail */
        val description: kotlin.String,
        /* A list of ingredients. Items may be a single ingredient or a list of ingredients which can be poured simultaneously. */
        val ingredients: List<Any> = mutableListOf(),
        @Nested("${CocktailCategoryDao.TABLE_NAME}.")
        val category: CocktailCategory,
        @Nested("${GlassDao.TABLE_NAME}.")
        val glass: Glass,
        /* A link to an image of the cocktail */
        val imageLink: kotlin.String? = null,
        /* The time of the latest update to the recipe */
        /* Arbitrary notes on the cocktail */
        val notes: kotlin.String? = null,
        val revisionDate: Long? = null
) : BaseModel<Cocktail> {
    override fun withId(id: Int): Cocktail {
        return copy(id = id)
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (javaClass != other?.javaClass) return false

        other as Cocktail

        if (id != other.id) return false
        if (name != other.name) return false
        if (description != other.description) return false
        if (ingredients != other.ingredients) return false
        if (category != other.category) return false
        if (glass != other.glass) return false
        if (imageLink != other.imageLink) return false
        if (notes != other.notes) return false

        return true
    }

    override fun hashCode(): Int {
        var result = id
        result = 31 * result + name.hashCode()
        result = 31 * result + description.hashCode()
        result = 31 * result + (ingredients.hashCode())
        result = 31 * result + category.hashCode()
        result = 31 * result + glass.hashCode()
        result = 31 * result + (imageLink?.hashCode() ?: 0)
        result = 31 * result + (notes?.hashCode() ?: 0)
        return result
    }

    @Suppress("UNCHECKED_CAST")
    fun flatIngredients(): Sequence<Ingredient> = ingredients.asSequence()
            .flatMap {
                if (it is Ingredient) sequenceOf(it)
                else (it as List<Ingredient>).asSequence()
            }

    @Suppress("UNCHECKED_CAST")
    fun rankedIngredients(block: (Int, Ingredient) -> Unit) {
        ingredients
                .asSequence()
                .mapIndexed { index, any ->
                    if (any is Ingredient) sequenceOf(index to any)
                    else (any as List<Ingredient>).asSequence().map { index to it }
                }
                .flatMap { it }
                .forEach { (rank, ingredient) -> block(rank, ingredient) }
    }

    @Suppress("UNCHECKED_CAST")
    fun rankedIngredients(): Sequence<Pair<Int, Ingredient>> {
        return ingredients
                .asSequence()
                .mapIndexed { index, any ->
                    if (any is Ingredient) sequenceOf(index to any)
                    else (any as List<Ingredient>).asSequence().map { index to it }
                }
                .flatMap { it }
    }
}

@Suppress("MoveLambdaOutsideParentheses")
object IngredientComparator :
        Comparator<Any> by compareBy({ IngredientComparator.rank(it) }) {

    @Suppress("UNCHECKED_CAST")
    private fun rank(any: Any) = if (any is Ingredient) any.rank
    else (any as List<Ingredient>).firstOrNull()!!.rank

}
